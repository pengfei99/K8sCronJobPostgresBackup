name: Main workflow for publishing to pypi
on:  # define the job trigger event, in our case, push our merge to branch master will trigger below action
    push:
      branches: [master]

jobs:
  build-n-publish:
    name: Build and publish to the test
    runs-on: ${{ matrix.os }}
    # set up config values
    strategy:
      # you need to add this, because if one job fail will cancel all other jobs running in parallel
      fail-fast: false
      matrix:
        # we can set up multiple os and python versions
        # we can put [ubuntu-latest,macos-latest,windows-latest] as os
        os: [ubuntu-latest]
        # with multiple python version, the build will generate multiple tar bar and try to publish to the
        # pypi server at same time with the same package version tag. This will case pypi server internal errors
        # [3.7, 3.8, 3.9]
        python-version: [ 3.8 ]
        # we can also exclude some os and python version explicitly, below will not run test on mac, and windows
        # with python 3.9
        exclude:
          - os: macos-latest
            python-version: 3.9
          - os: windows-latest
            python-version: 3.9
    # set up job steps
    steps:
    # github runner has pip, you can use it to install all dependencies that you need before building and
    # testing your code
      # community action named actions/checkout@v2. This is an action that checks out your repository and downloads
      # it to the runner, allowing you to run actions against your code (such as testing tools). You must use the
      # checkout action any time your workflow will run against the repository's code, or you are using an action
      # defined in the repository.
      - uses: actions/checkout@v2
      # set up python version
      - name: set up python ${{ matrix.python-version }}
        # The setup_python@v2 setup python env with a specific python version.
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      # this enables runner to be aware of tests_require, without this, you can import the package name you are testing
      # in your test.
      - name: Install package
        run: |
          pip install -e .[test]
        # check your code style conformity with flake8
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        # run your project test
      - name: Test with pytest
        run: |
          pytest --import-mode=importlib
        # build the project to a tarball
      - name: Build binary wheel and a source tarball
        run: python setup.py sdist
       # publish it to the test pypi
      - name: Publish distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          user: __token__
          # note the pypi api token is stored at the project's github secrets section
          password: ${{ secrets.PROD_PYPI_API_TOKEN }}





