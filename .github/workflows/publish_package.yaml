name: Main workflow for publishing to pypi
on:
  # Triggers the workflow when a release is created
  release:
    types: [created]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-n-publish:
    name: build and test
    runs-on: ${{ matrix.os }}
    # set up config values
    strategy:
      # you need to add this, because if one job fail will cancel all other jobs running in parallel
      fail-fast: false
      matrix:
        # we can set up multiple os and python versions
        # we can put [ubuntu-latest,macos-latest,windows-latest] as os
        os: [ubuntu-latest]
        # with multiple python version, the build will generate multiple tar bar and try to publish to the
        # pypi server at same time with the same package version tag. This will case pypi server internal errors
        # [3.7, 3.8, 3.9]
        python-version: [ 3.8 ]
        # we can also exclude some os and python version explicitly, below will not run test on mac, and windows
        # with python 3.9
        exclude:
          - os: macos-latest
            python-version: 3.9
          - os: windows-latest
            python-version: 3.9
    # set up job steps
    steps:
    # github runner has pip, you can use it to install all dependencies that you need before building and
    # testing your code
      # community action named actions/checkout@v2. This is an action that checks out your repository and downloads
      # it to the runner, allowing you to run actions against your code (such as testing tools). You must use the
      # checkout action any time your workflow will run against the repository's code, or you are using an action
      # defined in the repository.
      - uses: actions/checkout@v2
      # set up python version
      - name: set up python ${{ matrix.python-version }}
        # The setup_python@v2 setup python env with a specific python version.
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # install poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
      #
      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}
      # change default poetry config. More details
      # can be found in https://python-poetry.org/docs/configuration/
      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs

      - name: Install Dependencies
        run: poetry install
        if: steps.cache.outputs.cache-hit != 'true'

        # check your code style conformity with flake8
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 ./dbsavior --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          poetry run flake8 ./dbsavior --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # add package name to the python path
      - name: set pythonpath
        run: |
          echo "PYTHONPATH=${PYTHONPATH}:$GITHUB_WORKSPACE/AtlasPyApi" >> $GITHUB_ENV
        # run your project test
      - name: Test with pytest
        run: |
          poetry run pytest --import-mode=importlib
      # publish to pypi
      - name: Build and publish to pypi
        uses: JRubics/poetry-publish@v1.11
        with:
          python_version: 3.8
          pypi_token: ${{ secrets.PROD_PYPI_API_TOKEN }}




